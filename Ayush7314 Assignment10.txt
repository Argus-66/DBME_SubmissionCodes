library_db> // mongosh

library_db> 

library_db> // Create/Switch to library database

library_db> use library_db
already on db library_db
library_db> 

library_db> // Insert sample data for our examples

library_db> db.books.insertMany([
...     {
...         title: "The Great Gatsby",
...         author: "F. Scott Fitzgerald",
...         genre: "Fiction",
...         price: 15.99,
...         published_year: 1925,
...         rating: 4.5,
...         copies_sold: 500,
...         publisher: "Scribner",
...         language: "English"
...     },
...     {
...         title: "1984",
...         author: "George Orwell",
...         genre: "Science Fiction",
...         price: 12.99,
...         published_year: 1949,
...         rating: 4.7,
...         copies_sold: 750,
...         publisher: "Secker and Warburg",
...         language: "English"
...     },
...     {
...         title: "To Kill a Mockingbird",
...         author: "Harper Lee",
...         genre: "Fiction",
...         price: 14.99,
...         published_year: 1960,
...         rating: 4.8,
...         copies_sold: 600,
...         publisher: "J. B. Lippincott",
...         language: "English"
...     },
...     {
...         title: "Don Quixote",
...         author: "Miguel de Cervantes",
...         genre: "Fiction",
...         price: 16.99,
...         published_year: 1605,
...         rating: 4.4,
...         copies_sold: 400,
...         publisher: "Francisco de Robles",
...         language: "Spanish"
...     }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('671e03274139370eed838729'),
    '1': ObjectId('671e03274139370eed83872a'),
    '2': ObjectId('671e03274139370eed83872b'),
    '3': ObjectId('671e03274139370eed83872c')
  }
}
library_db> 

library_db> // INDEXING EXAMPLES -------------------------------------------

library_db> 

library_db> // 1. Create a single field index

library_db> db.books.createIndex({ title: 1 })  // 1 for ascending, -1 for descending
title_1
library_db> 

library_db> // 2. Create a compound index

library_db> db.books.createIndex({ genre: 1, published_year: -1 })
genre_1_published_year_-1
library_db> 

library_db> // 3. Create a text index for text search

library_db> db.books.createIndex({ title: "text", author: "text" })
title_text_author_text
library_db> 

library_db> // 4. Create a unique index

library_db> db.books.createIndex({ isbn: 1 }, { unique: true })
MongoServerError[DuplicateKey]: Index build failed: 65abec85-7a57-4580-b587-274903db01e8: Collection library_db.books ( 787077ac-ae6f-4df1-95e2-73dc6b6261fb ) :: caused by :: E11000 duplicate key error collection: library_db.books index: isbn_1 dup key: { isbn: null }
library_db> 

library_db> // 5. View all indexes on a collection

library_db> db.books.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { title: 1 }, name: 'title_1' },
  {
    v: 2,
    key: { genre: 1, published_year: -1 },
    name: 'genre_1_published_year_-1'
  },
  {
    v: 2,
    key: { _fts: 'text', _ftsx: 1 },
    name: 'title_text_author_text',
    weights: { author: 1, title: 1 },
    default_language: 'english',
    language_override: 'language',
    textIndexVersion: 3
  }
]
library_db> 

library_db> // 6. Drop an index

library_db> db.books.dropIndex("title_1")
{ nIndexesWas: 4, ok: 1 }
library_db> 

library_db> // AGGREGATION EXAMPLES ----------------------------------------

library_db> 

library_db> // 1. Basic Aggregation: Group by genre and count books

library_db> db.books.aggregate([
...     {
...         $group: {
...             _id: "$genre",
...             count: { $sum: 1 },
...             avgPrice: { $avg: "$price" }
...         }
...     }
... ])
[
  { _id: 'Fiction', count: 3, avgPrice: 15.99 },
  { _id: 'Science Fiction', count: 1, avgPrice: 12.99 }
]
library_db> 

library_db> // 2. Multiple Stage Pipeline: Books with high ratings and sales

library_db> db.books.aggregate([
...     {
...         $match: {
...             rating: { $gt: 4.5 },
...             copies_sold: { $gt: 500 }
...         }
...     },
...     {
...         $project: {
...             _id: 0,
...             title: 1,
...             author: 1,
...             rating: 1,
...             copies_sold: 1
...         }
...     },
...     {
...         $sort: { rating: -1 }
...     }
... ])
[
  {
    title: 'To Kill a Mockingbird',
    author: 'Harper Lee',
    rating: 4.8,
    copies_sold: 600
  },
  {
    title: '1984',
    author: 'George Orwell',
    rating: 4.7,
    copies_sold: 750
  }
]
library_db> 

library_db> // 3. Complex Aggregation: Sales Analysis

library_db> db.books.aggregate([
...     {
...         $match: {
...             published_year: { $gt: 1900 }
...         }
...     },
...     {
...         $group: {
...             _id: "$genre",
...             total_sales: { $sum: "$copies_sold" },
...             avg_price: { $avg: "$price" },
...             titles: { $push: "$title" }
...         }
...     },
...     {
...         $sort: { total_sales: -1 }
...     },
...     {
...         $project: {
...             _id: 1,
...             total_sales: 1,
...             avg_price: { $round: ["$avg_price", 2] },
...             number_of_books: { $size: "$titles" },
...             titles: 1
...         }
...     }
... ])
[
  {
    _id: 'Fiction',
    total_sales: 1100,
    titles: [ 'The Great Gatsby', 'To Kill a Mockingbird' ],
    avg_price: 15.49,
    number_of_books: 2
  },
  {
    _id: 'Science Fiction',
    total_sales: 750,
    titles: [ '1984' ],
    avg_price: 12.99,
    number_of_books: 1
  }
]
library_db> 

library_db> // 4. Using $lookup (JOIN operation)

library_db> db.books.aggregate([
...     {
...         $lookup: {
...             from: "publishers",
...             localField: "publisher",
...             foreignField: "name",
...             as: "publisher_info"
...         }
...     },
...     {
...         $unwind: "$publisher_info"
...     },
...     {
...         $project: {
...             title: 1,
...             publisher: 1,
...             "publisher_info.country": 1
...         }
...     }
... ])

library_db> 

library_db> // 5. Date Aggregation: Books by century

library_db> db.books.aggregate([
...     {
...         $addFields: {
...             century: {
...                 $concat: [
...                     { $toString: { $subtract: [{ $floor: { $divide: ["$published_year", 100] } }, -1] } },
...                     "th Century"
...                 ]
...             }
...         }
...     },
...     {
...         $group: {
...             _id: "$century",
...             books: { $push: "$title" },
...             count: { $sum: 1 }
...         }
...     },
...     {
...         $sort: { _id: 1 }
...     }
... ])
[
  { _id: '17th Century', books: [ 'Don Quixote' ], count: 1 },
  {
    _id: '20th Century',
    books: [ 'The Great Gatsby', '1984', 'To Kill a Mockingbird' ],
    count: 3
  }
]
library_db> 

library_db> // USING INDEXES IN QUERIES ------------------------------------

library_db> 

library_db> // 1. Query using single field index

library_db> db.books.find({ title: "1984" }).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'library_db.books',
    indexFilterSet: false,
    parsedQuery: { title: { '$eq': '1984' } },
    queryHash: '244E9C29',
    planCacheKey: '244E9C29',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'COLLSCAN',
      filter: { title: { '$eq': '1984' } },
      direction: 'forward'
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 1,
    executionTimeMillis: 0,
    totalKeysExamined: 0,
    totalDocsExamined: 4,
    executionStages: {
      stage: 'COLLSCAN',
      filter: { title: { '$eq': '1984' } },
      nReturned: 1,
      executionTimeMillisEstimate: 0,
      works: 5,
      advanced: 1,
      needTime: 3,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      direction: 'forward',
      docsExamined: 4
    }
  },
  command: { find: 'books', filter: { title: '1984' }, '$db': 'library_db' },
  serverInfo: {
    host: 'pop-os',
    port: 27017,
    version: '6.0.16',
    gitVersion: '1bbe71e91a41b097b19d036dee47b861b3f27181'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600
  },
  ok: 1
}
library_db> 

library_db> // 2. Query using compound index

library_db> db.books.find({ 
...     genre: "Fiction",
...     published_year: { $gt: 1950 }
... }).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'library_db.books',
    indexFilterSet: false,
    parsedQuery: {
      '$and': [
        { genre: { '$eq': 'Fiction' } },
        { published_year: { '$gt': 1950 } }
      ]
    },
    queryHash: '7F23EDA9',
    planCacheKey: '9DC3BFFC',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'FETCH',
      inputStage: {
        stage: 'IXSCAN',
        keyPattern: { genre: 1, published_year: -1 },
        indexName: 'genre_1_published_year_-1',
        isMultiKey: false,
        multiKeyPaths: { genre: [], published_year: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: {
          genre: [ '["Fiction", "Fiction"]' ],
          published_year: [ '[inf.0, 1950)' ]
        }
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 1,
    executionTimeMillis: 1,
    totalKeysExamined: 1,
    totalDocsExamined: 1,
    executionStages: {
      stage: 'FETCH',
      nReturned: 1,
      executionTimeMillisEstimate: 0,
      works: 2,
      advanced: 1,
      needTime: 0,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      docsExamined: 1,
      alreadyHasObj: 0,
      inputStage: {
        stage: 'IXSCAN',
        nReturned: 1,
        executionTimeMillisEstimate: 0,
        works: 2,
        advanced: 1,
        needTime: 0,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        keyPattern: { genre: 1, published_year: -1 },
        indexName: 'genre_1_published_year_-1',
        isMultiKey: false,
        multiKeyPaths: { genre: [], published_year: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: {
          genre: [ '["Fiction", "Fiction"]' ],
          published_year: [ '[inf.0, 1950)' ]
        },
        keysExamined: 1,
        seeks: 1,
        dupsTested: 0,
        dupsDropped: 0
      }
    }
  },
  command: {
    find: 'books',
    filter: { genre: 'Fiction', published_year: { '$gt': 1950 } },
    '$db': 'library_db'
  },
  serverInfo: {
    host: 'pop-os',
    port: 27017,
    version: '6.0.16',
    gitVersion: '1bbe71e91a41b097b19d036dee47b861b3f27181'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600
  },
  ok: 1
}
library_db> 

library_db> // 3. Text search using text index

library_db> db.books.find({
...     $text: { $search: "Gatsby Mockingbird" }
... }).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'library_db.books',
    indexFilterSet: false,
    parsedQuery: {
      '$text': {
        '$search': 'Gatsby Mockingbird',
        '$language': 'english',
        '$caseSensitive': false,
        '$diacriticSensitive': false
      }
    },
    queryHash: '8BF6BFCC',
    planCacheKey: 'E2440218',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'TEXT_MATCH',
      indexPrefix: {},
      indexName: 'title_text_author_text',
      parsedTextQuery: {
        terms: [ 'gatsbi', 'mockingbird' ],
        negatedTerms: [],
        phrases: [],
        negatedPhrases: []
      },
      textIndexVersion: 3,
      inputStage: {
        stage: 'FETCH',
        inputStage: {
          stage: 'OR',
          inputStages: [
            {
              stage: 'IXSCAN',
              keyPattern: { _fts: 'text', _ftsx: 1 },
              indexName: 'title_text_author_text',
              isMultiKey: true,
              isUnique: false,
              isSparse: false,
              isPartial: false,
              indexVersion: 2,
              direction: 'backward',
              indexBounds: {}
            },
            {
              stage: 'IXSCAN',
              keyPattern: { _fts: 'text', _ftsx: 1 },
              indexName: 'title_text_author_text',
              isMultiKey: true,
              isUnique: false,
              isSparse: false,
              isPartial: false,
              indexVersion: 2,
              direction: 'backward',
              indexBounds: {}
            }
          ]
        }
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 2,
    executionTimeMillis: 1,
    totalKeysExamined: 2,
    totalDocsExamined: 2,
    executionStages: {
      stage: 'TEXT_MATCH',
      nReturned: 2,
      executionTimeMillisEstimate: 0,
      works: 4,
      advanced: 2,
      needTime: 1,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      indexPrefix: {},
      indexName: 'title_text_author_text',
      parsedTextQuery: {
        terms: [ 'gatsbi', 'mockingbird' ],
        negatedTerms: [],
        phrases: [],
        negatedPhrases: []
      },
      textIndexVersion: 3,
      docsRejected: 0,
      inputStage: {
        stage: 'FETCH',
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        works: 4,
        advanced: 2,
        needTime: 1,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        docsExamined: 2,
        alreadyHasObj: 0,
        inputStage: {
          stage: 'OR',
          nReturned: 2,
          executionTimeMillisEstimate: 0,
          works: 4,
          advanced: 2,
          needTime: 1,
          needYield: 0,
          saveState: 0,
          restoreState: 0,
          isEOF: 1,
          dupsTested: 2,
          dupsDropped: 0,
          inputStages: [
            {
              stage: 'IXSCAN',
              nReturned: 1,
              executionTimeMillisEstimate: 0,
              works: 2,
              advanced: 1,
              needTime: 0,
              needYield: 0,
              saveState: 0,
              restoreState: 0,
              isEOF: 1,
              keyPattern: { _fts: 'text', _ftsx: 1 },
              indexName: 'title_text_author_text',
              isMultiKey: true,
              isUnique: false,
              isSparse: false,
              isPartial: false,
              indexVersion: 2,
              direction: 'backward',
              indexBounds: {},
              keysExamined: 1,
              seeks: 1,
              dupsTested: 1,
              dupsDropped: 0
            },
            {
              stage: 'IXSCAN',
              nReturned: 1,
              executionTimeMillisEstimate: 0,
              works: 2,
              advanced: 1,
              needTime: 0,
              needYield: 0,
              saveState: 0,
              restoreState: 0,
              isEOF: 1,
              keyPattern: { _fts: 'text', _ftsx: 1 },
              indexName: 'title_text_author_text',
              isMultiKey: true,
              isUnique: false,
              isSparse: false,
              isPartial: false,
              indexVersion: 2,
              direction: 'backward',
              indexBounds: {},
              keysExamined: 1,
              seeks: 1,
              dupsTested: 1,
              dupsDropped: 0
            }
          ]
        }
      }
    }
  },
  command: {
    find: 'books',
    filter: { '$text': { '$search': 'Gatsby Mockingbird' } },
    '$db': 'library_db'
  },
  serverInfo: {
    host: 'pop-os',
    port: 27017,
    version: '6.0.16',
    gitVersion: '1bbe71e91a41b097b19d036dee47b861b3f27181'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600
  },
  ok: 1
}
library_db> db.books.find().pretty()
[
  {
    _id: ObjectId('671e03274139370eed838729'),
    title: 'The Great Gatsby',
    author: 'F. Scott Fitzgerald',
    genre: 'Fiction',
    price: 15.99,
    published_year: 1925,
    rating: 4.5,
    copies_sold: 500,
    publisher: 'Scribner',
    language: 'English'
  },
  {
    _id: ObjectId('671e03274139370eed83872a'),
    title: '1984',
    author: 'George Orwell',
    genre: 'Science Fiction',
    price: 12.99,
    published_year: 1949,
    rating: 4.7,
    copies_sold: 750,
    publisher: 'Secker and Warburg',
    language: 'English'
  },
  {
    _id: ObjectId('671e03274139370eed83872b'),
    title: 'To Kill a Mockingbird',
    author: 'Harper Lee',
    genre: 'Fiction',
    price: 14.99,
    published_year: 1960,
    rating: 4.8,
    copies_sold: 600,
    publisher: 'J. B. Lippincott',
    language: 'English'
  },
  {
    _id: ObjectId('671e03274139370eed83872c'),
    title: 'Don Quixote',
    author: 'Miguel de Cervantes',
    genre: 'Fiction',
    price: 16.99,
    published_year: 1605,
    rating: 4.4,
    copies_sold: 400,
    publisher: 'Francisco de Robles',
    language: 'Spanish'
  }
]
library_db> 

